#!/usr/bin/python3 -B

import os
import sys
from config import *
from component import *
from graph import *
from schema import *


def graph_command(argv):
	if len(argv) > 1:
		if argv[1] == 'new' or argv[1] == 'n':
			graph_new()
		return

	# Dump all graphs if no arguments
	graphs_print()


def component_command(argv, gno, cno):
	if len(argv) > 1:
		if argv[1] == 'new' or argv[1] == 'n':
			component_new(gno)
			return gno, cno

		if re.match(r'\d+\.\d+', argv[1]):
			# Check whether component exists
			gidx, cidx = argv[1].split('.')
			rdir = os.path.expanduser(GRDB_DIR)
			gdir = rdir + '/' + str(gidx)
			if os.path.isdir(gdir):
				cdir = gdir + '/' + str(cidx)
				if os.path.isdir(cdir):
					return int(gidx), int(cidx)

			printf('Component', argv[1], 'does not exist')

		return gno, cno

	# Dump all components if no arguments
	components_print(gno)
	return gno, cno


def schema_command(argv, gno, cno):
	if len(argv) > 1:
		if argv[1] == 'add' or argv[1] == 'a':
			if len(argv) == 4:
				# Read existing schema

				# Add new attribute to schema
				schema_add()

				# Write new schema

				return

			print('Illegal schema add')
			return

	schema_print(gno, cno)


print('Database directory:', os.path.expanduser(GRDB_DIR))

# Determine current graph and component number
glist = graphs_get_list()
gnolist = list(map(int, glist))
gno = min(gnolist or (-1))

clist = components_get_list(gno)
cnolist = list(map(int, clist))
cno = min(cnolist or (-1))

print('Current component:', str(gno) + '.' + str(cno))

while True:
	if gno < 0 or cno < 0:
		line = input(PROMPT)
	else:
		line = input(str(gno) + '.' + str(cno) + '> ')

	argv = line.split()

	if len(argv) == 0:
		continue

	if argv[0] == 'quit':
		sys.exit(0)

	if argv[0] == 'clear':
		continue;

	if argv[0] == 'graph' or argv[0] == 'g':
		graph_command(argv)
		continue

	if argv[0] == 'component' or argv[0] == 'c':
		gno, cno = component_command(argv, gno, cno)
		continue

	if argv[0] == 'schema' or argv[0] == 's':
		schema_command(argv, gno, cno)
		continue
