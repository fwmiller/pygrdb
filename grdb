#!/usr/bin/python3 -B

import os
import sys
from config import *
from component import *
from graph import *
from schema import *


def graph_command(argv, gno, cno):
	if len(argv) > 1:
		if argv[1] == 'new' or argv[1] == 'n':
			gidx, cidx = graph_new()
			return gidx, cidx
		return gno, cno

	# Dump all graphs if no arguments
	graphs_print()
	return gno, cno


def component_command(argv, gno, cno):
	if len(argv) > 1:
		if argv[1] == 'new' or argv[1] == 'n':
			component_new(gno)
			return gno, cno

		if re.match(r'\d+\.\d+', argv[1]):
			# Check whether component exists
			gidx, cidx = argv[1].split('.')
			rdir = os.path.expanduser(GRDB_DIR)
			gdir = rdir + '/' + str(gidx)
			if os.path.isdir(gdir):
				cdir = gdir + '/' + str(cidx)
				if os.path.isdir(cdir):
					return int(gidx), int(cidx)

			printf('Component', argv[1], 'does not exist')

		return gno, cno

	# Dump all components if no arguments
	components_print(gno)
	return gno, cno


def schema_command_add(argv, gno, cno):
	if len(argv) != 5:
		print('Illegal number of arguments for schema add')
		return

	if argv[2] != 'vertex' and argv[2] != 'v' and \
	   argv[2] != 'edge'   and argv[2] != 'e':
		print('Illegal schema type for schema add')
		return

	# Read existing schema
	schema = schema_read(gno, cno, argv[2])

	# Add new attribute to schema
	schema = schema_add(schema, argv[3], argv[4])

	# Write new schema
	schema_write(schema, gno, cno, argv[2])


def schema_command(argv, gno, cno):
	if len(argv) > 1:
		if argv[1] == 'add' or argv[1] == 'a':
			if gno < 0 or cno < 0:
				print('Component does not exist')
				return;

			schema_command_add(argv, gno, cno)
			return

	if gno >= 0 and cno >= 0:
		schema_print(gno, cno, 'v')
		schema_print(gno, cno, 'e')


print('Database directory:', os.path.expanduser(GRDB_DIR))

# Determine current graph and component number
gno = (-1)
cno = (-1)

glist = graphs_get_list()
gnolist = list(map(int, glist))
if gnolist:
	gno = min(gnolist)

if gno >= 0:
	clist = components_get_list(gno)
	cnolist = list(map(int, clist))
	if cnolist:
		cno = min(cnolist or (-1))

# Main command line loop
while True:
	if gno < 0 or cno < 0:
		line = input(PROMPT)
	else:
		line = input(str(gno) + '.' + str(cno) + '> ')

	argv = line.split()

	if len(argv) == 0:
		continue

	if argv[0] == 'quit':
		sys.exit(0)

	if argv[0] == 'clear':
		continue;

	if argv[0] == 'graph' or argv[0] == 'g':
		gno, cno = graph_command(argv, gno, cno)
		continue

	if argv[0] == 'component' or argv[0] == 'c':
		gno, cno = component_command(argv, gno, cno)
		continue

	if argv[0] == 'schema' or argv[0] == 's':
		schema_command(argv, gno, cno)
		continue
